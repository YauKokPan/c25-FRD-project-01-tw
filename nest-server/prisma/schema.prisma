generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String  @unique
  password  String
  phone     String
  is_admin  Boolean
  hotel_prisma    Hotel[]
  comment_prisma Comment[]
   booking_key Booking[]
   payment_key Payment[]
    favorite_key Favorite[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  google_map_address String
  district    String
  phone       String
  profile_pic String
  description String
  total_rooms Int
  hourly_rate Int
  user_prisma        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  is_deleted Boolean
  favorite_key  Favorite[] 
  gallery_key Gallery[]
  comment_key Comment[]
  booking_key Booking[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("hotels")
}

model Booking{
id        Int      @id @default(autoincrement())
user_booking_key User @relation(fields:[user_id], references: [id])
user_id Int
hotel_booking_key Hotel @relation(fields:[hotel_id],references: [id])
hotel_id Int
payment_key Payment?
start_time DateTime
end_time DateTime
total_hours Int
total_price Int
booking_phone String
booking_email String
remarks String
createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bookings")
}

  model Gallery {
    id          Int      @id @default(autoincrement()) 
    hotel_name  String
    hotel_img   String
    hotel_key  Hotel @relation(fields:[hotel_id],references: [id])
    hotel_id Int

    @@map("gallery")
  }


model ContactUs{
    id          Int      @id @default(autoincrement()) 
    contact_name String
    contact_email String
    contact_phone String
    contact_message String

    @@map("contactus")
}

model Comment{
  id  Int   @id @default(autoincrement())
  user_booking_key User @relation(fields:[user_id], references: [id])
  user_id Int
  user_hotel_booking_key Hotel @relation(fields:[hotel_id], references: [id])
  hotel_id  Int
  nick_name String
  comment_text String
  rating  Int
  createdAt DateTime @default(now()) @map("created_at")
  is_deleted Boolean

  @@map("comments")
}

model Payment {
        id      Int    @id @default(autoincrement())
        orderID String
        status  String
        method String
        user_payment_key User @relation(fields:[user_id], references: [id])
        user_id Int 
        booking_payment_key Booking @relation(fields:[booking_id], references: [id])
        booking_id Int @unique

    @@map("payment")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  hotel     Hotel    @relation(fields: [hotel_id], references: [id])
  hotel_id  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([user_id, hotel_id])
  @@map("favorites")
}
